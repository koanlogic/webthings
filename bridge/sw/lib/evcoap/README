Contents

  1 Library Initialization
  2 Client
  2.1 Create Request
  2.2 Customize Request
  2.3 Send Request
  3 Server
  3.1 Configure Listening Address
  3.2 URI dispatch
  3.2.1 Register callback
  3.2.2 Fallback
  4. Observe
  5. PDUs Lifetime
  
1 Library Initialization

  The event handling machinery of evcoap is based on libevent 2.
  
  The evcoap event base, which has to be supplied to most of the high level 
  APIs, needs both a basic event base and a DNS event base, and is initialized
  like this:

      struct event_base *base = event_base_new();

      ec_t *coap = ec_init(base, evdns_base_new(base, 1));

2 Client

  Clients do requests and wait for corresponding responses.  Requests and
  responses are paired through CoAP tokens.  The client generates a token and
  adds it to the request using the Token option.  The server must mirror the 
  same Token option that was received by the client in the corresponding 
  response.

  Evcoap takes care of timeout/retransmission logics of the CONfirmable message
  model transparently.

2.1 Create Request

  The most simple request PDU is created by specifying a method, an URI and
  a messaging model (confirmable or non-confirmable):

      const char *uri = "coap://[::1]:56565/a/b/res";
      ec_client_t *cli = ec_request_new(coap, EC_COAP_GET, uri, EC_COAP_NON);

  If the request needs to pass through a CoAP intermediary, then its address
  must be explicitly supplied using the following specialized creation 
  interface:

      const char *proxy = "kink.things.home.";
      ev_uint16_t port = 6565;

      cli = ec_proxy_request_new(coap, EC_PUT, uri, EC_NON, proxy, port);

  [[At present NoSec is the only mode supported, so URIs in the 'coaps' schema
  are rejected.  DTLS support is planned and will be implemented ASAP.]]

2.2 Customize Request

  Additional options (aside from Uri-* or Proxy-Uri and a default generated
  Token, which is implicitly created by ec_request_new) may be added like this:

      const ev_uint8_t etag[] = { 0xde, 0xad, 0xbe, 0xef };

      ec_request_add_if_match(cli, etag, sizeof etag);
      ec_request_add_accept(cli, EC_MT_TEXT_PLAIN);
      ec_request_add_accept(cli, EC_MT_APPLICATION_JSON);

  If needed (e.g. when using PUT or POST methods) a payload may be added as 
  follows:

      const ev_uint8_t payload[] = { 0xca, 0xfe, 0xba, 0xbe };

      ec_request_set_payload(cli, payload, sizeof payload);


2.3 Send Request

  When sending a request PDU, the user wants to be notified when any event
  related to her request happens.  To achieve that, she will supply a callback
  (and args) to the ec_request_send() interface.  The callback will be invoked 
  whenever an interesting event related to the ongoing request happens -- namely
  a RST condition, or the response coming back (note that ACK messages are 
  managed transparently and they will never reach the user interface.)

  The user may also supply a custom request timeout, so that she won't 
  starve waiting for a response that never comes back, e.g. due to a crashed
  or nonexistent server, a routing problem, etc.

  [[TBD: this may also be used as a "gather period" when the requested resource
  is multicast.  Multicast support needs some tweaking with the PDU format, 
  i.e. to support chaining of multiple responses.]]  

      void cb(ec_client_t *cli) { ... }

      struct timeval tout = { .tv_sec = 5, .tv_usec = 125 };

      ec_request_send(cli, cb, NULL, &tout);
                      ^    ^   ^     ^
                      |    |   |     |
                      |    |   |     `-- User timeout
                      |    `---`-- User callback and args 
                      `-- Client transaction object

  The CoAP event base can be easily accessed in the callback context so that
  the user may break the event loop or otherwise manipulate it (e.g. add/remove
  her events, etc.), like in the following snippet:
 
      void cb(ec_client_t *cli)
      {
          ec_t *coap = ec_client_get_base(cli);
          ec_cli_state_t st = ec_client_get_state(cli);

          /* On error break the event loop. */
          if (st != EC_CLI_STATE_REQ_DONE)
               ec_loopbreak(coap);
          [...]
      }

3 Server

  Servers receive requests from clients and to their best to reply something 
  meaningful.

3.1 Configure Listening Address

  First off, a CoAP server binds one or more addresses on the target machine:

      ec_bind_socket(coap, "127.0.0.1", 50505)
      ec_bind_socket(coap, "[::1]", EVCOAP_DEFAULT_PORT)

  The underlying sockets will be automatically monitored by evcoap for incoming
  PDUs.

  When a new (valid, non-duplicate) request PDU comes in through one of the 
  configured server endpoints, an user-defined callback will be possibly 
  triggered (see next paragraph.)

3.2 URI dispatch

  A CoAP server hosts resources identified by their URIs.

  There are two ways to register actions associated to resources:
    a) bound an URI to a user defined callback;
    b) associate any unbound URI to a user defined callback.

  Requests with a given URI are tried in the following order:
    2) strcasecmp the requested URI to callbacks (see 3.2.1);
    3) invoke fallback, if set (see 3.2.2).

  [[TODO observable resources.]]

3.2.1 Register callback

  The evcoap user supplies an URI and pair it along with the callback function
  that she wants to be invoked whenever a client requests a matching URI.

      ec_register_cb(coap, "/.well-known/core", cb, cb_args);

  The callback function shall have the following signature:

    ec_cbrc_t cb(ec_server_t *srv, void *args, struct timeval *interval,
            bool resched) { ... }

  which is quite rich and needs some explanation.  First off the easy stuff:
  1st argument is the server transaction record containing information regarding
  the received request that must be handled; 2nd is the optional arguments that
  the user has supplied when installing this callback.

  The 3rd and 4th arguments, 'interval' and 'resched', and the callback return 
  code need some more context to be fully understood.  Basically there are two 
  different use cases: 
   (a) server responds immediately to a request, i.e. within the callback scope;
   (b) server needs some time to produce the response (i.e. when acting as a
       proxy, or when producing the resource representation takes some 
       blocking/long computation.)

  In case (a) the callback in charge of producing the response PDU, by providing
  the following information:
    - response code
    - optional payload and Content-Type option
    - further options
  the user shall return a EC_CBRC_READY code to the evcoap core.
  The 'resched' and 'interval' arguments are unused.

  In case (b) the callback shall, at its first invocation (i.e. resched==false),
  return one of the following:
    - EC_CBRC_WAIT: this will be used whenever the user expects the
      representation to be ready after the 'interval' time (passed as a result
      argument to the callback) has elapsed, and basically asks evcoap to
      be rescheduled in some point of time after 'interval' has elapsed.  
      Next time the callback will be invoked, it has the 'resched' parameter
      set to true.
    - EC_CBRC_POLL: this will be used whenever the user can't predict how long
      will it take to produce the requested representation.  The user basically
      asks evcoap to monitor the supplied server transaction record to catch
      when its .ready flag is set.

  The 'resched' argument is a boolean that distinguishes an invocation due to 
  a newly received request (resched=false), from a "rescheduled" invocation 
  (resched=true.)

  When returning EC_CBRC_ERROR, evcoap will automatically produce a 5.00 (i.e.
  internal server error) response to the client.

  For an example of reschedulable callback, see the following:

    ec_cbrc_t lengthy_cb(ec_server_t *srv, void *args, struct timeval *interval,
            bool resched)
    {
        u_unused_args(args);

        if (!resched)
        {
            /* Request the creation of the resource representation
             * and ask evcoap to be called back in 1 second. */
            ask_resource_creation();
            *interval = { .tv_sec = 1, .tv_usec = 0 };
            return 0;
        } 
        else    /* rescheduled */
        {
            ev_uint8_t *r;
            size_t r_sz;

            /* Check if the resource has been produced. */
            if (r = lengthy_resource_is_ready(&r_sz))
            {
                ec_response_set_payload(srv, r, rlen);
                ec_response_set_code(srv, EC_CONTENT);
                return 0;
            }
            else
            {
                /* Nope, call me back in 0.5 seconds we should be
                 * luckier this time. */
                *resched_after = { .tv_sec = 0, .tv_usec = 5 };
                return 0;
            }
        }
    }
  
  If the user is able to produce an immediate representation for the resource,
  or if she don't mind blocking (though this is generally discouraged when using
  evcoap) the 'interval' and 'resched' arguments can be safely ignored.

3.2.2 Fallback

  Besides URI specific callbacks, the user can define a catch-all callback
  using:

      ec_register_fb(coap, gen_cb, gen_cb_args)

  If this has been set, any request with an unmapped URI will trigger it, giving
  the user the opportunity to reply something more interesting than a generic
  4.04 (Not Found) response code.

4. Observe

  To create an observer, one of the following interfaces can be used, depending
  on whether a proxy is used (or not) to access the target resource:

      cli = ec_proxy_observe_new(coap, uri, EC_CON, proxy, port);
  or
      cli = ec_observe_new(coap, uri, EC_NON);

  The Observe request is sent via the usual ec_request_send() interface, but
  different from regular requests, CoAP Observe requests elicit one or more
  responses, hence the user supplied callback can be invoked one or more times.

  The user can return a special return code to signal its willingness to drop
  the observation (TODO).

  If the observed resource don't provide a notification within the associated
  Max-Age, the observation timeouts at the client, in which case the callback
  is invoked with a special status (TODO).


5. PDUs Lifetime

  Client and server objects are created by the user and disposed by evcoap.

