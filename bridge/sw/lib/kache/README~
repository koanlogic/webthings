Contents

  1 Requirements
  2 Kache Initialization
  3 Kache API
  4 Kache Stats


1 Requirements
  Kache requires libu and makl to compile.


2 Kache Initialization

  kache_t *kache = kache_init();

  Kache stores pointers to generic objects. Kache maximum size is bounded, 
  and cached items are discarded with LFU policy.
  To let kache deallocate items correctly, the user must
  provide a free function for their object type.
  
  void kache_set_freefunc(kache_t *kache, void (*k_free)(void *obj));

  int kache_set_max_size(kache_t *kache, int max_size);

  void kache_free(kache_t *kache);

  You can also assign a function, that can be used to compare two stored objects, in order to 
  define a custom discard policy when the cache is full. This is expecially useful if you want to
  discard first the objects that are more likely to result stale.

  int kache_set_custom_discard_policy(kache_t *kache, int (*compare)(void *o1, void *o2))
  
  int kache_init_data_structure(kache_t *kache)
3 Kache API


  int kache_set(kache_t *kache, const char *key, const void *content);
  int kache_unset(kache_t *kache, const char *key);
  void *kache_get(kache_t *kache, const char *key);



4 Kache Stats

  Kache stores the number of cache requests performed on every entry. 
  Every time an entry is updated, the number of gets performed on the key is 
  kept in a history.
  This data structure is useful to gather information about which cache 
  entries are more popular.
  Each history is associated to its kache entry.
  Kache entries can be accessed by attaching a procedure to the "set" function.
  
  int kache_attach_set_procedure(kache_t *kache, 
                int (*procedure)(kache_entry_t *entry,void *arg), 
                void *arg);

  The procedure will be called immediatly after the entry and its
  history are up to date.

  A user can gather iterating over the history like this:

  for(i = 0; i< kache_entry->history_size; i++)
  {
      ...
  }
  
  The maximum size of an entry history defaults to 5. This can be changed with:

  int kache_set_history_length(kache_t *kache, int history_length)

