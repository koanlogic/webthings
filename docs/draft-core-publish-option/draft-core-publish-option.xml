<?xml version="1.0" encoding="US-ASCII"?>
<!-- vim: set ts=2 expandtab: -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC5988 SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.RFC.5988.xml">
<!ENTITY RFC6690 SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.RFC.6690.xml">
<!ENTITY I-D.ietf-core-coap SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-core-coap-18.xml">
<!ENTITY I-D.rahman-core-sleepy-problem-statement SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-rahman-core-sleepy-problem-statement-01.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes" ?>
<rfc category="std" docName="draft-fossati-core-publish-option-03" ipr="trust200902">
  <front>
    <title>
      Publish Option for CoAP
    </title>
    <author fullname="Thomas Fossati" initials="T.F." surname="Fossati">
      <organization>Alcatel-Lucent</organization>
      <address>
        <postal>
          <street>3 Ely Road</street>
          <city>Milton, Cambridge</city>
          <code>CB24 6DD</code>
          <country>UK</country>
        </postal>
        <email>thomas.fossati@alcatel-lucent.com</email>
      </address>
    </author>
    <author fullname="Pierpaolo Giacomin" initials="P.G." surname="Giacomin">
      <organization>Freelance</organization>
      <address>
        <email>yrz@anche.no</email>
      </address>
    </author>
    <author fullname="Salvatore Loreto" initials="S.L." surname="Loreto">
      <organization>Ericsson</organization>
      <address>
        <postal>
          <street>Hirsalantie 11</street>
          <city>Jorvas</city>
          <code>02420</code>
          <country>Finland</country>
        </postal>
        <email>salvatore.loreto@ericsson.com</email>
      </address>
    </author>
    <date year="2014" month="January"/>
    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>
    <keyword>CoAP, Monitor Option, sleepy sensor</keyword>
    <abstract>
      <t>This memo defines the Publish Option for the Constrained Application Protocol (CoAP).  The Publish Option is used by a CoAP Endpoint to control the authority delegation of one of its resources to another Endpoint.  All the phases of the authority delegation process (setup, renewal, cancellation) are controlled by a simple RESTful protocol.</t>
      <t>This memo also introduces the 'proxies' Web Linking relation type, to be used by a CoAP Proxy to explicitly advertise the resources that it can serve - either from its cache, or by forwarding the Client's request upstream.</t>
      <t>The Publish Option and the 'proxies' relation provide the building blocks for a comprehensive, in-protocol, solution to the sleepy/intermittent Endpoint use case.</t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction">
      <t>This memo defines the Publish Option for the Constrained Application Protocol <xref target="I-D.ietf-core-coap" />.  The Publish Option is used by a sleepy Endpoint (SEP) to temporarily delegate the authority of one of its resources to another, always on, Endpoint.  The delegated Endpoint is typically a Proxy, though it could be an Endpoint with no other special network role.  The SEP is given a simple RESTful messaging protocol that enables the setup, renewal and cancellation of the authority transfer.  The whole process is driven by the SEP, which may actually never need to listen or to keep any state.</t>
      <t>This memo also introduces the 'proxies' Web Linking <xref target="RFC5988" /> relation type. This new relation, which complements the default 'hosts' relation defined in <xref target="RFC6690" />, can be used by a CoAP Proxy to explicitly advertise the resources that it can serve, either from cache or by forwarding the Client's request upstream.</t>
      <t>The 'proxies' relation works in concert with the Publish Option to enable SEP discovery even while SEP is off-line.</t>
      <section title="Requirements Language and Motivation">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
        <t>The terms Client, Proxy, Server, and Endpoint are to be interpreted as described in <xref target="I-D.ietf-core-coap" />.</t> 
        <t>This memo reuses the terminology introduced in <xref target="I-D.rahman-core-sleepy-problem-statement"/>, and aims at meeting the objectives stated in its Section 4 via an entirely in-protocol solution.</t>
      </section>
    </section>
    <section title="Publish Option">
      <t>The Publish Option enables a SEP to temporarily (i.e. for a specified "lease" time) delegate the authority of one of its hosted resources to another Endpoint.</t>
      <figure align="center">
        <artwork align="left"><![CDATA[
+------+---+---+---+---+---------+--------+--------+---------+
|  No. | C | U | N | R | Name    | Format | Length | Default |
+------+---+---+---+---+---------+--------+--------+---------+
|  31  | x | x | x | - | Publish | uint   | 1      | (none)  |
+------+---+---+---+---+---------+--------+--------+---------+
        ]]></artwork>
      </figure>
      <t>The one-byte integer value carried by the Publish Option allows the publishing node to specify the set of CoAP methods that are allowed on the resource (see <xref target="publish_format" /> for details).</t>
      <t>The "lease" time of the Publish action is specified by an associated (implicit or explicit) Max-Age Option value.</t>
      <!-- <t>This allows a SEP to use the delegated Endpoint as the rendezvous point for one-way SEP to SEP signaling.</t> -->
      <section title="Value Format" anchor="publish_format">
        <t>The Publish Option consists of a single byte having the following layout:</t>
        <figure align="left">
          <artwork align="left"><![CDATA[
 0 1 2 3 4 5 6 7
+-+-+-+-+-+-+-+-+
|G P D 0 0 0 0 0|
+-+-+-+-+-+-+-+-+
          ]]></artwork>
        </figure>
        <t>Each of the higher 3 bits is a flag field indicating whether the associated CoAP method (respectively: GET, PUT and DELETE) is allowed on the published resource.  The POST method has resource/application specific semantics and can't therefore be safely delegated. The lower 5 bits are reserved and MUST be set to 0.</t>
        <!--
        <t>If the (optional) value is missing, then:
          <list>
            <t>on PUT, a default of 0x40 SHALL be assumed, indicating a read-only resource;</t>
            <t>on DELETE, a default value of 0x00 is assumed.</t> 
          </list>
        </t>
        -->
        <t>The 0x00 value is used to explicitly revoke the delegation (see <xref target="publish_removal"/>.) and MUST NOT be used for any other purpose of the Option.</t>
        <t>If the delegated Proxy receives a request for the published resource with a method that is not compatible with the mask supplied by the SEP, it MUST respond with a 4.05 (Method Not Allowed) response code.</t>
      </section> <!-- Value Format -->

    <section title="Operations">
      <section title="Publishing a Resource">
        <t>The SEP publishes one of its hosted resources, specified by the enclosed Proxy-URI, by making a PUT to the Proxy with a Publish Option attached.  The Publish Option value specifies the CoAP methods that Clients are allowed to use on the resource (see <xref target="publish_format"/>).</t>
        <t>The example below shows a delegation where the GET and PUT methods are allowed, whereas DELETE is explicitly prohibited, meaning that a Client can only read and update the resource.</t>
        <figure align="left">
          <artwork align="left"><![CDATA[
P        SEP
|   PUT   | Proxy-URI: coap://sep.example.org/res
|<--------+ Publish: 0xC0
|    r    | Content-Format: text/plain
|         | Max-Age: 1200
|  2.01   |
+-------->| ETag: 0xabcd
|         | 
|         |
          ]]></artwork>
        </figure>
        <t>The Proxy, which is voluntarily entrusted by the resource owner to act as the delegated origin for the "lease" time specified by Max-Age, replies with a 2.01 (Created) if the authority transfer succeeds.  An exact duplicate of the submitted representation is created, and from now on it can be accessed via the delegated Proxy using the original URI encoded in a Proxy-Uri Option.  If the Publish operation isn't successful (e.g. because the Proxy does not support Publish), then the origin transfer fails, and an appropriate response code is returned (e.g. 4.02 Bad Option).</t>
        <t>If no Max-Age is given, a default of 3600 seconds MUST be assumed.  The Max-Age value, either implicit or explicit, determines the lifetime of the origin delegation.  When Max-Age is elapsed, the Proxy MUST delete the published resource value (and any associated link-format metadata) and fall back to its usual proxying function.</t>
        <t>On successful delegation, the Proxy MUST generate a new ETag and return it in the 2.01 response to the Client; if the published resource can be UPDATE'd, then the Client SHOULD save the ETag value (see <xref target="get_ifmatch" />).</t>
        <t>The returned ETag value represents the state of the resource at the time the Publish operation is performed.  The Proxy MUST change its value whenever the underlying resource representation changes, e.g. if it gets UPDATE'd.  The current ETag value SHOULD be included by the Proxy in all responses involving the published representation.  The ETag can be used by SEP to make conditional requests to the Proxy to check whether the representation has changed (see <xref target="get_ifmatch" /> for details).</t>
        <t>The Publish Option is critical, and MUST NOT be present in a response.  If the Proxy does not recognize it, a 4.02 (Bad Option) MUST be returned to the Client.  If the Option value is not correctly formatted (see <xref target="publish_format"/>), a 4.00 (Bad Request) MUST be returned to the Client.  The Publish Option is not Safe-to-Forward, and neither is a Cache-Key.</t>
        <t>Since the 2.01 is emitted, and for the duration of the delegation, any Client wishing to access the resource can do so by making a Proxy-URI request to the Proxy, which shall then serve the resource from its own storage.</t>
        <t>An interesting outcome of this communication strategy is that the SEP may really never need to listen on its radio interface.  However, ignoring the response status code from Proxy, as well as the ETag value in case of UPDATE-able resources, is not a safe practice and SHOULD not be used unless the consequences are fully understood.</t>
        <t>Upon publishing, the Proxy MUST save the identity (e.g. the IP address) of the publishing SEP, and MUST use it to correctly authorise "maintenance" operations such as renewal or cancellation of the published resource.  The SEP identity MUST be kept for the whole duration of the delegation (including any associated renewal) and can be forgotten as soon as the delegation vanishes, either implicitly or explicitly.</t>
      </section>  <!-- Publishing a Resource -->
      <section title="Updating a Resource">
        <t>In order to update the delegated resource state or to just extend the lease period, the SEP sends basically the same request (except for the possibly updated representation value) to the Proxy, which in turn replies with a 2.04 Changed status code, and a new ETag value, in case the update operation succeeds.  If the operation fails, e.g. because the request comes from an Endpoint different from the publishing SEP, a suitable status code is returned (e.g. 4.01 Unauthorized).</t>
        <figure align="left">
          <artwork align="left"><![CDATA[
P        SEP
|   PUT   | Proxy-URI: coap://sep.example.org/res
|<--------+ Publish: 0xC0
|    r    | Content-Format: text/plain
|         | Max-Age: 1200
|  2.04   |
+-------->| ETag: 0xdcba
|         |
          ]]></artwork>
        </figure>
      </section>  <!-- Updating a Resource -->
      <section title="Unpublishing a Resource" anchor="publish_removal">
        <t>The delegation of a given resource can be explicitly revoked by the SEP at any time before the lease time expires, by issuing a DELETE request to the Proxy hosting the resource duplicate with a Publish Option with value 0x00.</t>
        <t>On successful deletion of the delegation, a 2.02 Deleted response code is returned by the Proxy.  On error a suitable status code is returned.</t>
        <figure align="left">
          <artwork align="left"><![CDATA[
P         SEP
|  DELETE  | Proxy-URI: coap://sep.example.org/res
|<---------+ Publish: 0x00
|          |
|   2.02   |
+--------->| 
|          |
          ]]></artwork>
        </figure>
      </section>  <!-- Unpublishing a Resource -->
      <section title="Checking for Change" anchor="get_ifmatch">
        <t>In order to check whether an UPDATE-able resource has changed, SEP issues a GET for the published resource with If-Match Option set to the last seen ETag value.</t>
        <t>The possible outcomes are:
          <list style="symbols">
            <t>4.04 (Not Found) if the resource has been deleted;</t>
            <t>2.05 (Content) if it has been otherwise modified;</t>
            <t>2.03 (Valid) if it has not changed.</t>
          </list>
          In case a 2.05 is returned, SEP saves the updated ETag returned by the Proxy, and uses it on subsequent If-Match GET's.</t>
        <t>Note that, in exceptionally simple scenarios, an unconditional GET followed by a memcmp against the previous representation value, MAY constitute a viable alternative to the method described above.</t>
      </section> <!-- Checking for Change -->
    </section> <!-- Operations -->
  </section> <!-- Publish Option -->
      <section title="The 'proxies' Relation Type">
        <t>The new 'proxies' Web Linking <xref target="RFC5988"/> relation type is meant to signify that the target resource carried by the link, which MUST be identified by an absolute URI, is reachable through a Proxy-URI request made to the anchored Origin (i.e. the Proxy).</t>
        <t>(Note that we need to specify the Proxy through an explicit anchor, thus increasing the verbosity of the link value, because of the way the context URI override rules are defined in Section 2.1 of <xref target="RFC6690"/>.  In fact, absent an explicit anchor, rule (b) would set the context to the SEP origin, which is definitely not what we want.)</t>
        <section title="Examples">
          <section title="Discover the Proxy for a Resource">
            <t>C multicasts a query to the /.well-known/core interface and discovers the P (associated to the coap://proxy.example.org authority) "proxies" the resource queried via an explicit href:</t>
            <figure align="left">
              <artwork align="left"><![CDATA[
M         C
|   GET   | Uri-Path: .well-known
|<--------+ Uri-Path: core
          | Uri-Query: href="coap://sep.example.org/res"
P  2.05   |
+-------->| <coap://sep.example.org/res>;
|         |     anchor="coap://proxy.example.org/";
|         |     rel="proxies"
              ]]></artwork>
            </figure>
          </section>  <!-- Discover the Proxy for a Resource -->
          <section title="Discover all the Resources that an Endpoint 'proxies'">
            <t>C discovers all the resources that P "proxies":</t>
            <figure align="left">
              <artwork align="left"><![CDATA[
P         C
|   GET   | Uri-Path: .well-known
|<--------+ Uri-Path: core
|         | Uri-Query: rel="proxies"
|  2.05   |
+-------->| <coap://sep.example.org/res>;
|         |     anchor="coap://proxy.example.org/";
|         |     rel="proxies",
|         | <...
              ]]></artwork>
            </figure>
            <t>and can then GET one of the "proxied" resource from P:</t>
            <figure align="left">
              <artwork align="left"><![CDATA[
P         C
|   GET   |
|<--------+ Proxy-URI: coap://sep.example.org/res 
|         |
|  2.05   |
+-------->| "res" data...
|         |
              ]]></artwork>
            </figure>
          <t>The 'proxies' relation is orthogonal to the Publish Option, so it's up to P to decide whether to serve coap://sep.example.org/res from its store/cache, or to forward the request to the origin at coap://sep.example.org.</t>
        </section>  <!-- Discover all the Resources "proxied" by an Endpoint -->
      </section>  <!-- Examples -->
      <section title="Publish Link-Format Attributes">
        <section title="Implicitly">
          <t>The resource metadata are implicitly extracted from the published  representation.  Basically, the Proxy works out the 'ct' and 'sz' attributes by inspecting Content-Format and the request payload size.</t>
          <t>The main advantage of this method is that it needs no further transmission except that needed for the Publish operation.  The disadvantage is the very limited (and fixed) number of attributes that can be derived, which makes it suitable only for the most basic use cases.</t>
        </section>
        <section title="Explicitly">
          <t>The resource metadata are explicitly published to the same Proxy-URI used for the sibling resource, either in a separate request/response cycle:</t>
          <figure align="left">
            <artwork align="left"><![CDATA[
P         S
|   PUT   | Proxy-URI: coap://sep.example.org/res
|<--------+ Publish: 0x60
|  <meta> | Content-Format: application/link-format
|         |
|  2.01   |
+-------->|
|         |
              ]]></artwork>
          </figure>
          <t>or atomically, within the same Publish operation, e.g. by using the Multipart Content-Format to aggregate one (or even more than one) representation(s) together with the application/link-format entry:</t>
          <figure align="left">
            <artwork align="left"><![CDATA[
P         S
|   PUT   | Proxy-URI: coap://sep.example.org/res
|<--------+ Publish: 0x60
|  [mp]   | Content-Format: application/multipart+publish
|         | Max-Age: 1200
|  2.01   |
+-------->|
|         |
              ]]></artwork>
          </figure>
          <t>Note that the former is non-atomic, and limited to only one representation of the resource; the latter is atomic and supports multiple Content-Format's for the published resource.</t>
        </section>
      </section>
      <!--
        <section title="Publishing the /.well-known/core Resource" anchor="wkc">

          <t>The Link-Format specification <xref target="RFC6690" /> has no explicit text about discovery of "well-known" devices through a Proxy, or about the cacheability rules for such resource.  Even if it seems reasonable to assume that the /.well-known/core URI is both query-able and cacheable through a Proxy, on the contrary the situation is not very much so.</t>  
          <t>In fact, since the "well-known" interface relies on the resource origin being implicitly defined by the source address of the UDP packet carrying the response, quering the "well-known" interface (either unicast or multicast) through a Proxy-URI has little hope to be fully functional.  The (ab)use of a an implicit L3 locator as the identifier of the resource authority makes "well-known" discovery generally incompatible with Proxy mediated communication, unless each target URI in a link is given as a URI and not as a relative-ref (section 4.1 of <xref target="RFC3986" />).</t>

          <t>Consequently, in this proposal we assume that the /.well-known/core of a SEP can be published if and only if the target URI in the each link is not a relative-ref.</t>
 
          <t>Its registration is the same as in <xref target="publish_creation" />, but the Proxy MAY need to treat it in a way that is slightly different from other "normal" delegated resources.  In fact, while delegation is in place (i.e. the lease period is not elapsed, and neither explicit revocation has happened) the Proxy MAY be able to respond to filtered queries (section 4.1 of <xref target="RFC6690" />) regarding the published /.well-known/core.</t>
      </section>

       <section title="Resource Directory">
        <t>Given the strong requirement on the link formatting given in <xref target="wkc" />, it could be preferable (or even necessary) to use the Resource Directory <xref target="I-D.ietf-core-resource-directory" /> as a means of delegating the discovery of the resources hosted at a SEP.</t>

        <t>This can be done either by the SEP, or automatically by the delegated Proxy when a Publish request is received.</t> 
        
        <t><cref anchor="Automatic push to RD">check it out</cref></t>

       </section>
-->
    </section>
    <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->
    <?rfc needLines="8" ?>
    <section title="Acknowledgements">
      <t>Thanks to
          Bruce Nordman,
          Matthieu Vial,
          Akbar Rahman,
          and Esko Dijk
         for comments and discussions that have helped shaping this document.
      </t>
    </section>
    <section anchor="IANA" title="IANA Considerations">
      <t>The following entry is added to the CoAP Option Numbers registry:</t>
      <figure align="center">
        <artwork align="left"><![CDATA[
.------------------------------.
| Number | Name    | Reference |
:--------:---------:-----------:
|   31   | Publish | This memo |
`------------------------------'
        ]]></artwork>
      </figure>
      <t>This memo registers the new "proxies" Web Linking relation type as per <xref target="RFC5988"/>.</t>
      <t>
        <list>
          <t>Relation Name: proxies</t>
          <t>Description: the target is the absolute URI of a resource proxied by the Origin stated in the anchor.</t>
          <t>Reference: this memo</t>
          <t>Notes: This relation is used in CoRE where links are retrieved as a "/.well-known/core" resource representation.</t>
          <t>Application Data: None</t>
        </list>
      </t>
    </section>
    <section anchor="Security" title="Security Considerations">
      <t>This section identifies Threats (T) and related countermeasures (C).</t>
      <?rfc subcompact="yes"?>
      <t>
        <list style="symbols">
          <t>T: cache poisoning.</t>
          <t>C: use strong auth to identify SEP.</t>
        </list>
      </t>
      <t>
        <list style="symbols">
          <t>T: unauthorized update or de-registration</t>
          <t>C: strong auth to identify SEP.</t>
        </list>
      </t>
      <t>
        <list style="symbols">
          <t>T: Proxy resources' exhaustion.</t>
          <t>C: use strong auth to identify SEP + quota limit.</t>
        </list>
      </t>
      <!-- TODO check this
      <t>
        <list style="symbols">
          <t>T: local state loss.</t>
          <t>C: cache redundancy.</t>
        </list>
      </t>
      -->
      <t>
        <list style="symbols">
          <t>T: Inject fake copies of the resource by a 3rd party.</t>
          <t>C: use delegation scheme that bundles the identities of the SEP and the Proxy, together with the resource being delegated.  A third party must be able to verify SEP and Proxy identities, maybe offline, and check the resource fingerprint.</t>
        </list>
      </t>
      <?rfc subcompact="no"?>
      <section title="Securing the Delegation">
        <t><cref>The following is just a sketch which needs further elaboration</cref> SEP signs the identity of the delegated Proxy and a fingerprint of the resource (both data and meta), and bundles it up with the resource itself, maybe in a MultiPart envelope (TBD define signed Content-Format).  Client verifies the resource is indeed from the SEP by checking the signature, and it has been served by the intended origin, within the validity frame of the delegation.  There seems to be an issue with hierarchical caching: the resource can't be served from a downstream Proxy which is different from the one that was originally delegated unless each Proxy in the delivery chain wraps the received message with its own credentials?</t>
        <!--
        each proxy should wrap the received message with its own credentials).</t>
    -->
      </section>  <!-- Securing the Delegation -->
    </section>  <!-- Security Considerations -->
  </middle>
  <back>
    <references title="Normative References">
      &RFC2119;
      &I-D.ietf-core-coap;
      &RFC5988;
      &RFC6690;
    </references>
    <references title="Informative References">
      &I-D.rahman-core-sleepy-problem-statement;
    </references>
    <section title="A (fairly) Comprehensive Example">
      <t>The following section details the whole life-cycle of an hypothetical Sleepy/Intermittent node that uses Publish to exchange data (both reading and writing) with other agents in a CoAP network.</t>
      <section title="Actors">
        <t>
          <list style="hanging" hangIndent="6">
            <t hangText="SEP ">Sleeping/Intermittent endpoint implementing two functions: F1, and F2.  Each function exposes one configurable parameter, and provides one output.</t>
            <t hangText="P ">Proxy with Publish support.</t>
            <t hangText="W ">Controller application which can configure function parameters on SEP.</t>
            <t hangText="R ">Consumer application which reads values from SEP.</t>
          </list>
        </t>
      </section>
      <section title="Resources">
        <t>The following resources model the two functions (F1 and F2) implemented by SEP in terms of their input and output parameters:
          <list style="hanging" hangIndent="17">
            <t hangText="coap://sep1/i1">Configurable parameter for F1.</t>
            <t hangText="coap://sep1/i2">Configurable parameter for F2.</t>
            <t hangText="coap://sep1/o1">Output of F1.</t>
            <t hangText="coap://sep1/o2">Output of F2.</t>
          </list>
        </t>
        <t>If the number of configuration parameters is not trivially small, then it might be handy to create an aux resource which can be polled by the SEP to track the parameters that have been reconfigured:
          <list style="hanging" hangIndent="17">
            <t hangText="coap://sep1/im">Update parameter mask.  Conceptually a n-bit mask (one bit per configurable parameter) used by W to mark the updated parameters, and by SEP to clear them once the corresponding configuration has been applied.</t>
          </list>
        </t>
      </section>
      <section title="Application Flow">
        <section title="Bootstrap">
          <t>SEP publishes all the application resources to P.</t>
          <?rfc subcompact="yes"?>
          <t>Configurable parameter for F1:
            <list style="hanging" hangIndent="11">
              <t hangText="SEP -> P :">PUT Proxy-URI=coap://sep1/i1, Publish="G,U", Payload="1"</t>
              <t hangText="P -> SEP :">2.01 (Created), ETag=0x01</t>
            </list>
          </t>
          <t>Configurable parameter for F2:
            <list style="hanging" hangIndent="11">
              <t hangText="SEP -> P :">PUT Proxy-URI=coap://sep1/i2, Publish="G,U", Payload="2"</t>
              <t hangText="P -> SEP :">2.01 (Created), ETag=0x01</t>
            </list>
          </t>
          <t>Output of F1:
            <list style="hanging" hangIndent="11">
              <t hangText="SEP -> P :">PUT Proxy-URI=coap://sep1/o1, Publish="G", Payload=""</t>
              <t hangText="P -> SEP :">2.01 (Created), ETag=0x01</t>
            </list>
          </t>
          <t>Output of F2:
            <list style="hanging" hangIndent="11">
              <t hangText="SEP -> P :">PUT Proxy-URI=coap://sep1/o2, Publish="G", Payload=""</t>
              <t hangText="P -> SEP :">2.01 (Created), ETag=0x01</t>
            </list>
          </t>
          <t>This assumes that SEP has pre-canned values "1" and "2" for its configurable parameters i1 and i2 respectively.</t>
          <t>Optionally:
            <list style="hanging" hangIndent="11">
              <t hangText="SEP -> P :">PUT Proxy-URI=coap://sep1/im, Publish="G,U", Payload="update_mask_cleared"</t>
              <t hangText="P -> SEP :">2.01 (Created), ETag=0x01</t>
            </list>
          </t>
        </section>
        <section title="Configuration and Reconfiguration" anchor="example_configuration">
          <t>W sets a new value, e.g. 5, for i2:
            <list style="hanging" hangIndent="11">
              <t hangText="W -> P :">PUT Proxy-URI=coap://sep1/i2, Payload="5"</t>
              <t hangText="P -> W :">2.04 (Changed), ETag=0x02</t>
            </list>
            P updates the value of i2 accordingly, and sets a new ETag on it, e.g. 0x02.
          </t>
          <t>When SEP wakes up, it polls its configuration variables via a conditional GET that uses the ETags returned by P at publishing time.  Since i1 has not changed, and is still associated with the original ETag, a 2.03 status code is returned:
            <list style="hanging" hangIndent="11">
              <t hangText="SEP -> P :">GET Proxy-URI=coap://sep1/i1, If-Match=0x01</t>
              <t hangText="P -> SEP :">2.03 (Valid)</t>
            </list>
            Since i2 has changed, a 2.05 status code is returned and the payload carries the new value.  Also, the new ETag associated with i2 is returned and is updated locally by the SEP:
            <list style="hanging" hangIndent="11">
              <t hangText="SEP -> P :">GET Proxy-URI=coap://sep1/i2, If-Match=0x01</t>
              <t hangText="P -> SEP :">2.05 (Content), ETag=0x02, Payload="5"</t>
            </list>
          </t>
          <t>The SEP reconfigures its F1 based on the new configuration setting, and continues its operations.</t>
        </section>
        <section title="Updating Functional Output" anchor="example_update_output">
          <t>SEP wakes up and commits the newly computed values, e.g. 6 and 8, to P:
            <list style="hanging" hangIndent="11">
              <t hangText="SEP -> P :">PUT Proxy-URI=coap://sep1/o1, Publish="G", Payload="6"</t>
              <t hangText="P -> SEP :">2.04 (Changed), ETag=0x02</t>
            </list>
            <list style="hanging" hangIndent="11">
              <t hangText="SEP -> P :">PUT Proxy-URI=coap://sep1/o2, Publish="G", Payload="8"</t>
              <t hangText="P -> SEP :">2.04 (Changed), ETag=0x02</t>
            </list>
            P sets the new values, assigns a new ETag, and gives it back to P together with a 2.04 status code.
          </t>
        </section>
        <section title="Retrieving Functional Output" anchor="example_retrieve_output">
          <t>R needs to retrieve the latest values for the functions computed by SEP; thus, it asks P to retrieve the associated resources:
            <list style="hanging" hangIndent="11">
              <t hangText="R -> P :">GET Proxy-URI=coap://sep1/o1</t>
              <t hangText="P -> R :">2.05 (Content), ETag=0x02, Payload="6"</t>
            </list>
            <list style="hanging" hangIndent="11">
              <t hangText="R -> P :">GET Proxy-URI=coap://sep1/o2</t>
              <t hangText="P -> R :">2.05 (Content), ETag=0x02, Payload="8"</t>
            </list>
            Note that the exchange above applies to the very first poll.  Subsequent polls can be done conditionally on the "last-seen" ETag.
          </t>
          <t>Also note that the above assumes SEP has been able to update its values at least once.  R must be prepared to retrieve empty representations, if SEP has not yet updated their value since boot-strap.</t>
        </section>
        <section title="SEP Reboot">
          <t>The idempotence of all the involved methods guarantees a clean recovery in face of a reboot of the SEP.  In fact, if at a given time SEP reboots and loose soft state, including the configuration parameters: SEP has to go again through the bootstrap phase in which the application resources are published:
            <list style="hanging" hangIndent="11">
              <t hangText="SEP -> P :">PUT Proxy-URI=coap://sep1/i1, Publish="G,U", Payload="1"</t>
              <t hangText="P -> SEP :">2.04 (Changed), ETag=0x03</t>
            </list>
            <list style="hanging" hangIndent="11">
              <t hangText="SEP -> P :">PUT Proxy-URI=coap://sep1/i2, Publish="G,U", Payload="2"</t>
              <t hangText="P -> SEP :">2.04 (Changed), ETag=0x03</t>
            </list>
            <list style="hanging" hangIndent="11">
              <t hangText="SEP -> P :">PUT Proxy-URI=coap://sep1/o1, Publish="G", Payload=""</t>
              <t hangText="P -> SEP :">2.04 (Changed), ETag=0x03</t>
            </list>
            <list style="hanging" hangIndent="11">
              <t hangText="SEP -> P :">PUT Proxy-URI=coap://sep1/o2, Publish="G", Payload=""</t>
              <t hangText="P -> SEP :">2.04 (Changed), ETag=0x03</t>
            </list>
            The ETag's value (0x03) needs to be not recently used (not within the Max-Age period for the resource).
          </t>
          <t>From now on everything can proceed as described in <xref target="example_configuration" />, <xref target="example_update_output" />, and  <xref target="example_retrieve_output" /></t>
        </section>
      </section>
    </section>
  </back>
</rfc>
