<?xml version="1.0" encoding="US-ASCII"?>
<!-- vim: set ts=2 expandtab: -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
<!ENTITY I-D.ietf-core-coap SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-core-coap-08.xml">
<!ENTITY I-D.ietf-core-observe SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-core-observe-04.xml">
<!ENTITY I-D.ietf-core-block SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-core-block-08.xml">
<!ENTITY I-D.ietf-core-link-format SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-core-link-format-11.xml">
<!ENTITY I-D.shelby-core-coap-req SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-shelby-core-coap-req-02.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes" ?>
<rfc category="info" docName="draft-giacomin-core-sleepy-option-00" ipr="trust200902">
  <front>
    <title>
      Sleepy Option for CoAP
    </title>
    <author
      fullname="Thomas Fossati"
      initials="T.F."
      surname="Fossati"
    >
      <organization>KoanLogic</organization>
        <address>
          <postal>
            <street>Via di Sabbiuno, 11/5</street>
            <city>Bologna</city>
            <code>40100</code>
            <country>Italy</country>
        </postal>
        <email>tho@koanlogic.com</email>
      </address>
    </author>

    <author
      fullname="Pierpaolo Giacomin"
      initials="P.G."
      surname="Giacomin"
    >
      <organization>Freelance</organization>
      <address>
        <email>yrz@anche.no</email>
      </address>
    </author>

    <author
      fullname="Salvatore Loreto"
      initials="S.L."
      surname="Loreto"
    >
      <organization>Ericsson</organization>
      <address>
        <postal>
          <street>Hirsalantie 11</street>
          <city>Jorvas</city>
          <code>02420</code>
          <country>Finland</country>
        </postal>
        <email>salvatore.loreto@ericsson.com</email>
      </address>
    </author>

    <author
      fullname="Mirko Rossini"
      initials="M.R."
      surname="Rossini"
    >
      <organization>CS Dept. University of Bologna</organization>
      <address>
        <email>mirko.rossini@ymail.com</email>
      </address>
    </author>

    <date month="March" year="2012" />

    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>

    <keyword>CoAP, Sleepy option, sleepy sensor</keyword>

    <abstract>

      <t>This memo defines a framework for allowing asynchronous communication between sleepy sensors mediated by a supporting Proxy node. The Proxy acts as a store-and-forward agent that handles requests on behalf of a sleepy client, and buffers responses coming from the target origin until the requesting client wakes up and get the computation results.</t>
<t>A new CoAP option, Sleepy, is defined to initiate and control the asynchronous exchange.</t>

    </abstract>
  </front>

  <middle>
    <section title="Introduction">

      <t>The proposal described in this memo covers the following use case: <list style="empty"><t>a node A, displaying a very short duty-cycle, needs to interact with one or more resources hosted at another sleepy node B.  The probability of an empty intersection between their respective wake periods is quite high, making it hard for the two to synchronize.</t></list></t>

      <t>The proposal is to arm the Proxy with the ability to act as a store-and-forward agent mediating the request/response exchange between "A" and "B".</t>  

      <t>"A" declares the will to act onto a given resource hosted at "B" to the Proxy, and gives a "getback" indication that tells the Proxy the time at which it is going to be on duty again, and willing to retrieve the response from "B".</t>

     <t>The Proxy is in charge of making the request on behalf of "A", using an appropriate poll interval for a time span upper bounded by the "getback" value, and to buffer the response from "B" until "A" wakes up again.</t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119" />.</t>
      </section>
    </section>

    <section title="Motivation">
      <t>This memo focuses on the requirement REQ3 of <xref target="I-D.shelby-core-coap-req" />:</t>

      <figure align="center">
        <artwork align="left"><![CDATA[
REQ3:   The ability to deal with sleeping nodes.  Devices may be
        powered off at any point in time but periodically "wake up"
        for brief periods of time.
        ]]></artwork>
      </figure>

    </section>

    <section title="Basic Message Flows">
    <t>In the most general scenario both A and B are sleepy endpoints showing empty intersection as to their wake intervals and the Proxy does not have a Cache (or the actual data is missing within the Cache). </t>

    <section title="Basic Message Flow with CON Semantics">
      <t>A typical flow of communication involving the Sleepy option using CON messaging is shown in <xref target="base_con_msg_flow" />.</t>

      <figure align="center" anchor="base_con_msg_flow">
        <artwork align="left"><![CDATA[
    A                        P                         B
    .                        |                         .
    .    CON (0x7a10)        |                         .
(1) +----------------------->|                         .
    |    Method              |                         .
    |    Proxy-Uri: B/res    |                         .
    |    Sleepy: {2,58,0}    |                         .
    |                        |                         .
    |    ACK (0x7a10)        |                         .
(2) |<-----------------------+                         .
    .                        |   Method                .
(3) .                        +------------------X      .
    .                        |   Uri-Path: /res        .
    .                        |                         .
    .                        |   Method                .
(4) .                        +------------------X      .
    .                        |   Uri-Path: /res        .
    .                        |                         .
    .                        |   Method                |
(5) .                        +------------------------>|
    .                        |   Uri-Path: /res        |
    .                        |                         |
    .                        |   Response Code         |
(6) .                        |<------------------------+
    .                        |   [Content]             |
    .    CON (0xfa10)        |                         .
(7) |<-----------------------+                         .
    |    Response Code       |                         .
    |    [Content]           |                         .
    |                        |                         .
    |    ACK (0xfa10)        |                         .
(8) +----------------------->+                         .
    .                        |                         .
        ]]></artwork>
      </figure>

      <t>In message (1) a sleepy node, A, asks the Proxy to act upon the resource identified by the Proxy-Uri Option in a possibly asynchronous way by supplying the Sleepy Option indicating a time at which A thinks it may be ready (i.e. awake) to retrieve the response message. The Sleepy Option in the message (1) tell to the Proxy that A will go off-duty in 2 milliseconds, and it will be off-duty for 58 milliseconds.</t> 

      <t>In case the Proxy understands the Sleepy Option, it replies (2) with a separate ACK.</t>

      <t>From now on A can get back to sleep while the Proxy sends the request to the target node, B -- messages (3-5) -- and eventually get a response back (6).</t>

      <t>The stored response is kept by the Proxy until A is on duty again. (The seeming on-duty time is computed using the quantities previously supplied by A through the Sleepy Option.)  The Proxy sends the separate response back, operating with the usual rules of CON retransmission, until an ACK from A is heard, or the trasmission retries are exhausted.</t>

      <t>Please note that, generally speaking, the framework is completely agnostic as to the transported message type and method.  Further, the Proxy may rearrange any implied block-wise transfer <xref target="I-D.ietf-core-block" /> in an optimal way.</t>

      <t><cref anchor="LOST_ACK" source="TF">What if message (2) is lost ?</cref></t>
    </section>

    <section title="Basic Message Flow with NON Semantics">
      <t>In case the sleepy sensor uses NON semantics, the resulting exchange is the basically the same as the one depicted in <xref target="base_con_msg_flow" /> with messages (2) and (8) removed.</t>
    </section>
    </section>

    <section title="Optimized Message Flow">
        <t>The Proxy/Cache, in charge of making the request on behalf of "A", MUST try to immediately satisfy a request by searching the Cache.</t>
        <t><xref target="opt_msg_flow1" /> shows a request from A which can satisfied from the cache (i.e. cache hit) without interrogating B.</t>

        <figure align="center" anchor="opt_msg_flow1">
          <artwork align="left"><![CDATA[
    A                        P                         B
    .                        |                         .
    .                        |                         .
    .    CON (0x7a10)        |                         .
(1) +----------------------->|                         .
    |    Method              |                         .
    |    Proxy-Uri: B/res    |                         .
    |    Sleepy: {2,58,0}    |                         .
    |                        |                         .
    |                   [cache hit]                    .
    |                        |                         .
    |    ACK (0x7a10)        |                         .
(7) |<-----------------------+                         .
    .    Response Code       |                         .
    .    [Content]           |                         .
    .                        |                         .
    .                        |                         .
          ]]></artwork>
        </figure>

	<t>In case a request from A which can not be satisfied from the Cache (i.e. cache miss); the Proxy, in charge of making 
        the request on behalf of "A", sends the request to the target node and eventually get a response back.</t>
        
        <t>The Proxy MAY decide to forward the request to the target node right away (<xref target="opt_msg_flow2" />) in case the "time left before sleeping" indication supplied by A is deemed enough to try and forward the request to B (because perhaps the Proxy knows that B is awake.)  The latter exchange SHALL concurrently arm a timeout for sending the ACK message to A before it goes to sleep (in case CON is in use).</t>

        <figure align="center" anchor="opt_msg_flow2">
          <artwork align="left"><![CDATA[
    A                        P                         B
    .                        |                         .
    .                        |                         .
    .    CON (0x7a10)        |                         .
(1) +----------------------->|                         .
    |    Method              |                         .
    |    Proxy-Uri: B/res    |                         .
    |    Sleepy: {5,58,5}    |                         .
    |                        |                         .
    |                   [cache miss]                   .
    |                        |                         |
(5) |                        +------------------------>|
    |                        |   Uri-Path: /res        |
    |                        |                         |
    |                        |   Response Code         |
(6) |                        |<------------------------+
    |                        |   [Content]             |
    |    ACK (0x7a10)        |                         .
(7) |<-----------------------+                         .
    .    Response Code       |                         .
    .    [Content]           |                         .
    .                        |                         .
    .                        |                         .
          ]]></artwork>
        </figure>

        <t>In any case, if the Proxy has previously received an indication from the same target about its on/off-duty behavior via the Sleepy Option (<xref target="sleepy_option" />), or by any other means (e.g. <xref target="new_linkformat_attrs" />), it MUST use it to devise the most efficient poll strategy, thus avoiding unnecessary messaging which would just aggravate the constrained network congestion.</t>
    </section>

    <section title="Sleepy Option">
      <figure align="center">
        <artwork align="left"><![CDATA[
+-----+----------+---------+--------+--------+---------+
| No. | C/E      | Name    | Format | Length | Default |
+-----+----------+---------+--------+--------+---------+
|  XX | Elective | Sleepy  | uint   | 8-12 B | (none)  |
+-----+----------+---------+--------+--------+---------+
        ]]></artwork>
      </figure>

      <section title="Sleepy Option" anchor="sleepy_option">
        <t>The Sleepy Option in a request is used to signal a Proxy the will to initiate an asynchronous request/response exchange.</t>

        <t>The Sleepy option is critical. If the Proxy does not recognize it, a 4.02 (Bad Option) MUST be returned to the client.</t>
	
      	<t>The Sleepy Option MAY be discretionarily piggybacked by a sleepy node on response messages to inform the network about the sleepy pattern in use at the endpoint [[CHECK this as it implies Elective sema]] which in turn MAY be used by sleepy-friendly Proxies to reduce overall network congestion implied by the polling.</t>

      	<t>The value of the Sleepy option is partitioned in three subfields indicating: the remaining time before sleep, the expected sleep interval, and (optionally) the on-duty interval.</t> 

        <t>Two formats are available, a long format (<xref target="long_sleepy_fmt"/>), and a short one (<xref target="short_sleepy_fmt" />) which are easily distinguished from the Length field of the encoded option: 8 and 12 respectively.</t>

      <figure align="center" anchor="long_sleepy_fmt">
        <artwork align="center"><![CDATA[
+-------+-------+-------+
| LEFT  | SLEEP | WAKE  |
+-------+-------+-------+
        ]]></artwork>
      </figure>

      <figure align="center" anchor="short_sleepy_fmt">
        <artwork align="center"><![CDATA[
+-------+-------+
| LEFT  | SLEEP |
+-------+-------+
        ]]></artwork>
      </figure>

      <t>
        <list>
          <t>LEFT: 32-bit uint encoding the number of milliseconds that the sending node is left before going off-duty.  The maximum value is 0xFFFFFFFF, which allows for 71582 minutes.</t>
          <t>SLEEP: 32-bit uint encoding the number of milliseconds that the sending node is off-duty.  The maximum value allows for 71582 minutes (i.e. approx. 50 days).</t>
          <t>WAKE: optional 32-bit uint encoding the number of milliseconds that the sending node is on-duty.</t>
        </list>
      </t>

      <t><cref anchor="SHRINK" source="TF">use 24-bit uint for LEFT and WAKE (i.e. max ~4 hours)</cref></t>

      </section>
  
    </section>

    <section title="Limiting Network Congestion">
      <t>The retransmit function at the Proxy is conflicting with the overall requirement of congestion avoidance on the constrained network.</t>
      <t>Therefore the proxy SHOULD try to learn as much as possible about the on/off-duty behavior of the nodes that it is trying to reach, and keep the gained knowledge to inform future message exchanges with these endpoints.</t>
      <t>Missing an explicit signaling at the network/transport layer, endpoints that have a predictable sleep/awake pattern SHOULD try to inform the other entities in the network by piggybacking, whenever possible, the Sleepy Option in the messages (both requests and responses) they are exchanging with other peers.</t>
      <t>A further possibility is to distribute the information regarding the sleep/awake pattern by extending the resource attributes available through the Resource Directory with a link-format <xref target="I-D.ietf-core-link-format" /> version of the Sleepy option (see <xref target="new_linkformat_attrs" />).</t>
      <t></t>
    </section>

    <section title="New Link-Format Attributes" anchor="new_linkformat_attrs">

      <t>This specification defines the following new attributes for use in the CoRE Link Format:</t>
      <figure align="center">
        <artwork align="left"><![CDATA[
link-extension = ( "sleep" "=" 1*DIGIT )
link-extension = ( "wake" "=" 1*DIGIT )
link-extension = ( "start" "=" 1*DIGIT ) ; in seconds since Epoch
        ]]></artwork>
      </figure>

      <t>The sleep and wake attributes have the same semantics and format as the SLEEP and WAKE subfields of the Sleepy Option respectively (<xref target="sleepy_option" />).  The start attribute sets the base time from which the offsets indicated by sleep and wake must be computed.</t>
    </section>


    <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->
    <?rfc needLines="8" ?>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>[TBD]</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>The following entries are added to the CoAP Option Numbers registry:</t>
      <figure align="center">
        <artwork align="left"><![CDATA[
.------------------------------.
| Number | Name    | Reference |
:--------:---------:-----------:
|  2k    | Sleepy  | RFC XXXX  |
`------------------------------'
        ]]></artwork>
      </figure>

   <t>The "start", "wake" and "sleep" attributes need to be registered when a future Web Linking attribute is created.</t>

    </section>

    <section anchor="Security" title="Security Considerations">
      <t>The same considerations as those highlighted in Section 10.3.2 and 10.3.3 of <xref target="I-D.ietf-core-coap" /> apply, and are somewhat amplified by the possible congestion induced by the tentative setup of communication with the target node (messages 3-5 in <xref target="base_con_msg_flow" />).  The Proxy SHOULD try to send as little messages as possibile in order to contact the requested endpoint and MUST make use of the wake/sleep indication in case they have been previously made available by the target node through the Sleepy Option.</t> 
    </section>
  </middle>

  <back>
    <references title="Normative References">
      &RFC2119;
      &I-D.ietf-core-coap;
      &I-D.ietf-core-link-format;
      &I-D.ietf-core-block;
    </references>
    <references title="Informative References">
      &I-D.shelby-core-coap-req;
    </references>
  </back>
</rfc>
