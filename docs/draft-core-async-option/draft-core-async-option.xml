<?xml version="1.0" encoding="US-ASCII"?>
<!-- vim: set ts=2 expandtab: -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
<!ENTITY I-D.ietf-core-coap SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-core-coap-08.xml">
<!ENTITY I-D.ietf-core-observe SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-core-observe-04.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="info" docName="draft-core-async-option-00" ipr="trust200902">
  <front>
    <title>
      Monitor Option for CoAP
    </title>
    <author
      fullname="Thomas Fossati"
      initials="T.F."
      surname="Fossati"
    >
      <organization>KoanLogic</organization>
        <address>
          <postal>
            <street>Via di Sabbiuno, 11/5</street>
            <city>Bologna</city>
            <code>40100</code>
            <country>Italy</country>
        </postal>
        <email>tho@koanlogic.com</email>
      </address>
    </author>

    <author
      fullname="Pierpaolo Giacomin"
      initials="P.G."
      surname="Giacomin"
    >
      <organization>Freelance</organization>
      <address>
        <email>yrz@anche.no</email>
      </address>
    </author>

    <author
      fullname="Mirko Rossini"
      initials="M.R."
      surname="Rossini"
    >
      <organization>CS Dept. University of Bologna</organization>
      <address>
        <email>mirko.rossini@ymail.com</email>
      </address>
    </author>

    <date month="December" year="2011" />

    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>

    <keyword>CoAP, Async option, sleepy sensor</keyword>

    <abstract>

      <t>This memo defines a framework for allowing asynchronous communication between sleepy sensors which is mediated by a supporting Proxy node.</t>

      <t>The Proxy acts as a store-and-forward agent that handles requests on behalf of a sleepy client, and buffers responses coming from the target origin until the requesting client wakes up and get the computation results.</t>

      <t>Two new CoAP options are defined to control the asynchronous exchange: Async and GetBack.</t>

    </abstract>
  </front>

  <middle>
    <section title="Introduction">

      <t>The proposal described in this memo covers the following use case: a node A, displaying a very short duty-cycle, needs to interact with one or more resources hosted at another sleepy node B.
      <!-- that has a longer duty-cycle than A -->
      The probability of an empty intersection between their respective wake periods is quite high, making it hard for the two to synchronize.</t>

      <t>We want to arm the Proxy with the ability to act as a store-and-forward agent mediating the request/response exchange between A and B.  A declares the will to act onto a given resource hosted at B to the Proxy, and gives a "getback" indication that tells the Proxy the time at which it is going to be on duty again, and willing to retrieve the response from B.  The proxy is in charge of making the request on behalf of A, using an appropriate poll interval for a time span upper bounded by the "getback" value, and to buffer the potential response from B until A wakes up again.</t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119" />.</t>
      </section>
    </section>

    <section title="Options">
      <figure align="center">
        <artwork align="left"><![CDATA[
+-----+----------+---------+--------+--------+---------+
| No. | C/E      | Name    | Format | Length | Default |
+-----+----------+---------+--------+--------+---------+
|  XX | Critical | Async   | uint   | 0-4 B  | (none)  |
|  YY | Critical | GetBack | uint   | 0-4 B  | (none)  |
+-----+----------+---------+--------+--------+---------+
        ]]></artwork>
      </figure>

      <t>A typical flow of communication involving the said options is shown in <xref target="msg_flow" />.  Please note that the framework is completely agnostic as to the transported message type and method.</t>

      <figure align="center" anchor="msg_flow">
        <artwork align="left"><![CDATA[
A                        P                         B
|                        |                         :
|        Method          |                         :
+----------------------->|                         :
|    Proxy-Uri: B/res    |                         :
|      GetBack: 60       |                         :
|                        |                         :
|                        |                         :
|<-----------------------+                         :
|  2.0X Taken in Charge  |                         :
|     Async: 123456      |                         :
:                        |      Method             :
:                        +------------------X      :
:                        |   Uri-Path: /res        :
:                        |                         :
:                        |      Method             :
:                        +------------------X      :
:                        |   Uri-Path: /res        :
:                        |                         :
:                        |        Method           |
:                        +------------------------>|
:                        |     Uri-Path: /res      |
:                        |                         |
:                        |     Response Code       |
:                        |<------------------------+
:                        |       [Content]         |
:                        |                         |
:                        |                         |
|                        |                         :
|        Method          |                         :
+----------------------->|                         :
|    Proxy-Uri: B/res    |                         :
|        Async: 123456   |                         :
|                        |                         :
|     Response Code      |                         :
|<-----------------------+                         :
|       [Content]        |                         :
|                        |                         :
:        ]]></artwork>
      </figure>

      <t>An interesting feature here is that in case a CON exchange is requested by A, a separate ACK coming from B can be coalesced by the Proxy in a single piggybacked response to A. </t>

      <section title="GetBack Option">
        <t>The GetBack option is used to signal a Proxy the will to initiate an asynchronous request/response exchange.</t>

        <t>The GetBack option is critical. If the Proxy does not recognize it, a 4.02 (Bad Option) MUST be returned to the client.</t>
	
      	<t>The GetBack option MUST be present only in the message initiating the asynchronous request/response exchange.  No other message is expected to carry a GetBack option.</t>

      	<t>The value of the GetBack option represents the number of seconds that the requester intends to sleep before being back on duty and ready to consume the potential response.  As such it also provides an upper bound for the time interval during which the Proxy can try to forward the stored request to the target origin.</t>
      </section>
  
      <section title="Async Option">
        <t>The Async option is an unsigned integer uniquely identifying a given asynchronous request/response transaction (i.e. it MUST be unique per requestor, method, and target resource triple).</t>
        <t>It is generated by the Proxy and mirrored by the requestor on wake up, when it goes to the Proxy to consume the response.</t>
        <t>The Async option is critical.  If the Proxy does not recognize it, a  4.02 (Bad Option) MUST be returned to the client..</t>
      </section>
  
    </section>

    <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->
    <?rfc needLines="8" ?>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>[TBD]</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>The following entries are added to the CoAP Option Numbers registry:</t>
      <figure align="center">
        <artwork align="left"><![CDATA[
.------------------------------.
| Number | Name    | Reference |
:--------:---------:-----------:
|  2n+1  | Async   | RFC XXXX  |
+--------+---------+-----------+
|  2m+1  | GetBack | RFC XXXX  |
`------------------------------'
        ]]></artwork>
      </figure>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>[TBD]</t> 
    </section>
  </middle>

  <back>
    <references title="Normative References">
      &RFC2119;
      &I-D.ietf-core-coap;
    </references>
    <references title="Informative References">
      &I-D.ietf-core-observe;
    </references>
  </back>
</rfc>
