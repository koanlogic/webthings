<?xml version="1.0" encoding="US-ASCII"?>
<!-- vim: set ts=2 expandtab: -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
<!ENTITY I-D.ietf-core-coap SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-core-coap-08.xml">
<!ENTITY I-D.ietf-core-observe SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-core-observe-04.xml">
<!ENTITY I-D.ietf-core-block SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-core-block-08.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="info" docName="draft-core-async-option-00" ipr="trust200902">
  <front>
    <title>
      Async Option for CoAP
    </title>
    <author
      fullname="Thomas Fossati"
      initials="T.F."
      surname="Fossati"
    >
      <organization>KoanLogic</organization>
        <address>
          <postal>
            <street>Via di Sabbiuno, 11/5</street>
            <city>Bologna</city>
            <code>40100</code>
            <country>Italy</country>
        </postal>
        <email>tho@koanlogic.com</email>
      </address>
    </author>

    <author
      fullname="Pierpaolo Giacomin"
      initials="P.G."
      surname="Giacomin"
    >
      <organization>Freelance</organization>
      <address>
        <email>yrz@anche.no</email>
      </address>
    </author>

    <author
      fullname="Mirko Rossini"
      initials="M.R."
      surname="Rossini"
    >
      <organization>CS Dept. University of Bologna</organization>
      <address>
        <email>mirko.rossini@ymail.com</email>
      </address>
    </author>

    <date month="March" year="2012" />

    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>

    <keyword>CoAP, Async option, Sleepy option, GetBack option, sleepy sensor</keyword>

    <abstract>

      <t>This memo defines a framework for allowing asynchronous communication between sleepy sensors which is mediated by a supporting Proxy node.</t>

      <t>The Proxy acts as a store-and-forward agent that handles requests on behalf of a sleepy client, and buffers responses coming from the target origin until the requesting client wakes up and get the computation results.</t>

      <t>Three new CoAP options are defined to control the asynchronous exchange: Async, Sleepy and GetBack.</t>

    </abstract>
  </front>

  <middle>
    <section title="Introduction">

      <t>The proposal described in this memo covers the following use case: a node A, displaying a very short duty-cycle, needs to interact with one or more resources hosted at another sleepy node B.
      <!-- that has a longer duty-cycle than A -->
      The probability of an empty intersection between their respective wake periods is quite high, making it hard for the two to synchronize.</t>

      <t>We want to arm the Proxy with the ability to act as a store-and-forward agent mediating the request/response exchange between A and B.  A declares the will to act onto a given resource hosted at B to the Proxy, and gives a "getback" indication that tells the Proxy the time at which it is going to be on duty again, and willing to retrieve the response from B.  The proxy is in charge of making the request on behalf of A, using an appropriate poll interval for a time span upper bounded by the "getback" value, and to buffer the potential response from B until A wakes up again.</t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119" />.</t>
      </section>
    </section>

    <section title="Basic Message Flow">
      <t>A typical flow of communication involving the said options is shown in <xref target="base_msg_flow" />.  Please note that the framework is completely agnostic as to the transported message type and method.</t>

      <figure align="center" anchor="base_msg_flow">
        <artwork align="left"><![CDATA[
    A                        P                         B
    .                        |                         .
    .                        |                         .
    |        Method          |                         .
(1) +----------------------->|                         .
    |    Proxy-Uri: B/res    |                         .
    |      GetBack: 60       |                         .
    |                        |                         .
    |                        |                         .
(2) |<-----------------------+                         .
    |  2.0X Taken in Charge  |                         .
    |     Async: 123456      |                         .
    .                        |      Method             .
(3) .                        +------------------X      .
    .                        |   Uri-Path: /res        .
    .                        |                         .
    .                        |      Method             .
(4) .                        +------------------X      .
    .                        |   Uri-Path: /res        .
    .                        |                         .
    .                        |        Method           |
(5) .                        +------------------------>|
    .                        |     Uri-Path: /res      |
    .                        |                         |
    .                        |     Response Code       |
(6) .                        |<------------------------+
    .                        |       [Content]         |
    .                        |                         |
    .                        |                         |
    .                        |                         |
    |        Method          |                         .
(7) +----------------------->|                         .
    |    Proxy-Uri: B/res    |                         .
    |        Async: 123456   |                         .
    |                        |                         .
    |     Response Code      |                         .
(8) |<-----------------------+                         .
    |       [Content]        |                         .
    .                        |                         .
    .                        |                         .
        ]]></artwork>
      </figure>

      <t>In message (1) a sleepy node, A, asks the Proxy to act upon the resource identified by the Proxy-Uri Option in a possibly asynchronous way by supplying the GetBack Option indicating a time at which A thinks it will be ready (i.e. awake) to retrieve the response message.</t> 

      <t>In case the Proxy understands the GetBack Option, it replies (2) with a [TBD] status code and an Async Option containing a ticket associated to the asynchronous transaction that it is willing to handle on behalf of the client.</t>

      <t>From now on A can get back to sleep while the Proxy sends the request to the target node, B -- messages (3-5) and eventually get a response back (6).</t>

      <t>The stored response is kept by the Proxy until A is on duty again.  A reissues the original request attaching an Async Option carrying the previously given transaction ticket (7) and gets the corresponding response (8).</t>

      <!-- TODO reposition this -->
      <t>An interesting feature here is that in case a CON exchange is requested by A, a separate ACK coming from B can be coalesced by the Proxy in a single piggybacked response to A.  Further, the Proxy may rearrange any implied block-wise transfer <xref target="I-D.ietf-core-block" /> in an optimal way.</t>

    </section>

    <section title="Optimized Message Flow">
      <section title="Allowing Short Circuit">
        <t>The Proxy SHOULD try to immediately satisfy the request by searching the cache (<xref target="opt_msg_flow1" />), or MAY decide to forward the request to the target node right away (<xref target="opt_msg_flow2" />).  The latter exchange SHALL be armed with a very short timeout to be as friendly as possible to the short duty cycle of the requesting node.</t>

        <figure align="center" anchor="opt_msg_flow1">
          <artwork align="left"><![CDATA[
    A                        P                         B
    .                        |                         .
    .                        |                         .
    |        Method          |                         .
(1) +----------------------->|                         .
    |    Proxy-Uri: B/res    |                         .
    |      GetBack: 60       |                         .
    |                    [cache hit]                   .
    |     Response Code      |                         .
(2) |<-----------------------+                         .
    |       [Content]        |                         .
    .                        |                         .
    .                        |                         .
          ]]></artwork>
        </figure>

        <figure align="center" anchor="opt_msg_flow2">
          <artwork align="left"><![CDATA[
    A                        P                         B
    .                        |                         .
    .                        |                         .
    |        Method          |                         .
(1) +----------------------->|                         .
    |    Proxy-Uri: B/res    |                         .
    |      GetBack: 60       |                         .
    |                   [cache miss]                   .
    |                        |                         .
(2) |                        +------------------------>|
    |                        |     Uri-Path: /res      |
    |                        |                         |
    |                        |     Response Code       |
(3) |                        |<------------------------+
    |                        |       [Content]         |
    |                        |                         .
    |     Response Code      |                         .
(4) |<-----------------------+                         .
    |       [Content]        |                         .
    .                        |                         .
    .     ]]></artwork>
        </figure>

</section>

      <section title="Steering the Poll Strategy at the Proxy">
        <t>In case the Proxy has previously received an indication from the same target about its on/off-duty behaviour via the Sleepy Option (<xref target="sleepy_option" />), or by any other out-of-band means, it SHOULD use it to devise the most efficient poll strategy, thus avoiding unnecessary messaging which would just aggravate the constrained network congestion.</t>
      </section>
    </section>

    <section title="Options">
      <figure align="center">
        <artwork align="left"><![CDATA[
+-----+----------+---------+--------+--------+---------+
| No. | C/E      | Name    | Format | Length | Default |
+-----+----------+---------+--------+--------+---------+
|  XX | Elective | Sleepy  | uint   | 4 B    | (none)  |
|  YY | Critical | Async   | uint   | 0-4 B  | (none)  |
|  ZZ | Critical | GetBack | uint   | 0-4 B  | (none)  |
+-----+----------+---------+--------+--------+---------+
        ]]></artwork>
      </figure>

      <section title="GetBack Option">
        <t>The GetBack option is used to signal a Proxy the will to initiate an asynchronous request/response exchange.</t>

        <t>The GetBack option is critical. If the Proxy does not recognize it, a 4.02 (Bad Option) MUST be returned to the client.</t>
	
      	<t>The GetBack option MUST be present only in the message initiating the asynchronous request/response exchange.  No other message is expected to carry a GetBack option.</t>

      	<t>The value of the GetBack option represents the number of seconds that the requester intends to sleep before being back on duty and ready to consume the potential response.  As such it also provides an upper bound for the time interval during which the Proxy can try to forward the stored request to the target origin.</t>
      </section>
  
      <section title="Async Option">
        <t>The Async option is an unsigned integer uniquely identifying a given asynchronous request/response transaction (i.e. it MUST be unique per requester, method, and target resource triple).</t>
        <t>It is generated by the Proxy and mirrored by the requester on wake up, when it goes to the Proxy to consume the response.</t>
        <t>The Async option is critical.  If the Proxy does not recognize it, a  4.02 (Bad Option) MUST be returned to the client..</t>
        <t>If the Proxy receives an unknown value (i.e. one that is not currently bound to any asynchronous transaction for the requesting node), it MUST return a 4.00 Bad Request response code.</t>
      </section>

      <section title="Sleepy Option" anchor="sleepy_option">
        <t>This option is discretionarily piggybacked by a sleepy node on response messages to indicate: the remaining time before sleep, the expected sleep interval, and the on-duty interval. To save bandwith, a node with the intention of advertising its duty cycle, SHOULD include the Sleepy option only in its first message exchange with each requesting agent. The node MAY include the Sleepy option in later responses in case its duty cycle is subjected to changes. </t>

      <figure align="center">
        <artwork align="left"><![CDATA[
 0               1               2               3
 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       LEFT        |         SLEEP         |       DUTY        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        ]]></artwork>
      </figure>

      <t>
        <list>
          <t>LEFT: 10-bit subfield encoding the number of seconds that the sending node is left before going off-duty.  The maximum allowed value is 0x3FF, which allows for approx. 17 minutes.</t>
          <t>SLEEP: 12-bit subfield encoding the number of seconds that the sending node is off-duty.  The maximum allowed value is 0xFFF, which allows for approx. 68 minutes.</t>
          <t>DUTY: 10-bit subfield encoding the number of seconds that the sending node is on-duty.  The maximum allowed value is 0x3FF, which allows for approx. 17 minutes.</t>
        </list>
      </t>

      </section>
  
    </section>

    <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->
    <?rfc needLines="8" ?>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>[TBD]</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>The following entries are added to the CoAP Option Numbers registry:</t>
      <figure align="center">
        <artwork align="left"><![CDATA[
.------------------------------.
| Number | Name    | Reference |
:--------:---------:-----------:
|  2k    | Sleepy  | RFC XXXX  |
+--------+---------+-----------+
|  2n+1  | Async   | RFC XXXX  |
+--------+---------+-----------+
|  2m+1  | GetBack | RFC XXXX  |
`------------------------------'
        ]]></artwork>
      </figure>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>The same considerations as those highlighted in Section 10.3.2 and 10.3.3 of <xref target="I-D.ietf-core-coap" /> apply, and are somewhat amplified by the possible congestion induced by the tentative setup of communication with the target node (messages 3-5 in <xref target="base_msg_flow" />).  The Proxy SHOULD try to send as little messages as possibile in order to contact the requested endpoint and MUST make use of the wake/sleep indication in case they have been previously made available by the target node through the Sleepy Option. </t> 
    </section>
  </middle>

  <back>
    <references title="Normative References">
      &RFC2119;
      &I-D.ietf-core-coap;
    </references>
    <references title="Informative References">
      &I-D.ietf-core-block;
    </references>
  </back>
</rfc>
