
1 Client

  Clients do requests and wait for corresponding responses.  Requests and
  responses are correlated through tokens.  The client generates a token and
  adds it to the request using the Token option.  The server must include in
  the corresponding response the same Token option that was received by the 
  client.

  Evcoap takes care of the CONfirmable semantics transparently.

1.1 Create Request

  A new request PDUs is created by specifying a method, an URI and the 
  underlying messaging type (i.e. CONfirmable or NON-confirmable):

      const char *uri = "coap://[::1]:56565/a/b/res";

      pdu = evcoap_new_request(EVCOAP_NON, EVCOAP_GET, uri);

  If the request needs to pass through a CoAP intermediary it must be 
  explicitly supplied through the following extended creation interface:

      const char *proxy = "kink.things.home.";
      ev_uint16_t port = 6565;

      pdu = evcoap_new_proxy_request(EVCOAP_CON, EVCOAP_PUT, uri, proxy, port);

  At present NoSec is the only mode supported, so URIs in the 'coaps' schema
  are rejected.  DTLS support is planned.


1.2 Customize Request

  Additional options (aside from Uri-* or Proxy-Uri and a default generated
  Token) may be added like this:

      const ev_uint8_t etag[] = { 0xde, 0xad, 0xbe, 0xef };

      evcoap_add_ifmatch_option(pdu, etag, sizeof etag);
      evcoap_add_accept_option(pdu, EVCOAP_CT_TEXT_PLAIN);

1.3 Send Request

  When sending a request PDU, the user wants to be notified when any event
  related to her request happens.  To achieve this, she will supply a callback
  (and args) to the send interface.  The callback will be invoked whenever an
  interesting event related to the request PDU happens -- basically a RST 
  condition, or the response coming back (ACKs are managed transparently.)

  The user may also supply an user-space request timeout, so that it won't 
  starve waiting for a response that never comes back, e.g. due to a crashed
  or nonexistent server, a routing problem, etc.

      void cb(struct evcoap *coap, struct evcoap_pdu *pdu, 
              evcoap_send_status_t status, void *args) { ... }

      struct timeval tout = { .tv_sec = 5, .tv_usec = 125 };

      evcoap_send_request(coap, pdu, cb, NULL, &tout);
                            ^    ^    ^   ^      ^
                            |    |    |   |      |
                            |    |    |   |      `-- User timeout (may be NULL)
                            |    |    `------ User callback and args 
                            |    `-- Request PDU
                            `-- CoAP event base

1.2 Server

  TODO
