Contents

  1 Requirements
  2 Kache Initialization
  3 Kache API
  4 Kache Supervisor API
  5 Kache Stats


1 Requirements
  Kache requires libu and makl to compile.


2 Kache Initialization

  kache_t *kache = kache_init();

  Kache stores pointers to generic objects. Kache maximum size is bounded, 
  and cached items are discarded with LFU policy.
  To let kache deallocate items correctly, the user must
  provide a free function for their object type.
  
  kache_set_freefunc(kache_t *kache, void (*k_free)(void *obj))

  void kache_free(kache_t *kache);

3 Kache API


  int kache_set(kache_t *kache, const char *key, const void *content);
  int kache_unset(kache_t *kache, const char *key)
  void *kache_get(kache_t *kache, const char *key)


4 Kache Supervisor API

  TBD

5 Kache Stats

  Kache stores a history of the last cache requests performed. This data structure is
  useful to gather information about which cache entries are more popular.
  Kache history data are stored in this form:

  struct kache_request{
    struct timeval *tv; //request timestamp
    char *resource_key;
    void *kache_entry;
    ...
  }

  Kache provide a simple macro to iterate over the history:

  struct kache_request req;

  KACHE_HISTORY_FOREACH(&req,kache)
  {
      ...
  }
